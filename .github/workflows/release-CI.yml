# CI to release the project for Linux, Windows, and MacOS

name: Release CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  macos:
    runs-on: macos-latest
    env:
      RUSTUP_TOOLCHAIN: nightly
    strategy:
      matrix:
        python-version: ["3.10"] # figure out the shell part somedat
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: aarch64-apple-darwin
      - name: Install emscripten
        run: |
          rustup target add --toolchain nightly wasm32-unknown-emscripten

          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.27
          ./emsdk activate 3.1.27
          source ./emsdk_env.sh
          cd ..
          pip install maturin
          maturin build --target wasm32-unknown-emscripten -i python3.10 --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # windows:
  #   runs-on: windows-latest
  #   env:
  #     RUSTUP_TOOLCHAIN: nightly

  #   strategy:
  #     matrix:
  #       python-version: ["3.10"]
  #       target:
  #         [x86]
  #         # emsdk install sdk-incoming-64bit for 64 bit
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         architecture: ${{ matrix.target }}
  #     - uses: dtolnay/rust-toolchain@nightly
  #     - name: Install emscripten
  #       run: |
  #         rustup target add --toolchain nightly wasm32-unknown-emscripten

  #         git clone https://github.com/emscripten-core/emsdk.git
  #         cd emsdk
  #         .\emsdk.bat install 3.1.27
  #         .\emsdk.bat activate 3.1.27
  #         .\emsdk_env.bat
  #         cd ..
  #         pip install maturin
  #         maturin build --target wasm32-unknown-emscripten -i python3.10  --release --out dist

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install emscripten
        run: |
          rustup target add --toolchain nightly wasm32-unknown-emscripten

          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.27
          ./emsdk activate 3.1.27
          source ./emsdk_env.sh
          cd ..
          pip install maturin
          PYTHON=python${{ matrix.python.version }}
          maturin build --target wasm32-unknown-emscripten -i python3.10 --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # linux-cross:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python:
  #         [
  #           { version: "3.10", abi: "cp310-cp310" },
  #           { version: "3.11", abi: "cp311-cp311" },
  #         ]
  #       target: [aarch64, armv7, s390x, ppc64le]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install ems script
  #       run: |
  #         git clone https://github.com/emscripten-core/emsdk.git
  #         cd emsdk
  #         ./emsdk install 3.1.27
  #         ./emsdk activate 3.1.27
  #         source ./emsdk_env.sh
  #         rustup target add wasm32-unknown-emscripten

  #     - name: Build Wheels
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python.abi }}/lib
  #       with:
  #         target: ${{ matrix.target }}
  #         manylinux: auto
  #         args: -i python${{matrix.python.version}} --release --out dist
  #     - uses: uraimo/run-on-arch-action@v2.2.0
  #       name: Install build wheel
  #       with:
  #         arch: ${{ matrix.target }}
  #         distro: ubuntu20.04
  #         githubToken: ${{ github.token }}
  #         # Mount the dist directory as /artifacts in the container
  #         dockerRunArgs: |
  #           --volume "${PWD}/dist:/artifacts"
  #         install: |
  #           apt update -y
  #           apt install -y --no-install-recommends software-properties-common
  #           add-apt-repository ppa:deadsnakes/ppa
  #           apt update -y
  #           PYTHON=python${{ matrix.python.version }}
  #           apt install -y $PYTHON $PYTHON-distutils $PYTHON-venv
  #         run: |
  #           ls -lrth /artifacts
  #           PYTHON=python${{ matrix.python.version }}
  #           $PYTHON --version
  #           $PYTHON -m venv venv
  #           source venv/bin/activate
  #           pip install --upgrade pip
  #           pip install --force-reinstall dist/starfyre*.whl
  #           rustup target add wasm32-unknown-emscripten

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux] # I will worry about linux cross later
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
